Understand the hierarchy - 

	Nodes - A
		pods - A.a
			container - A.a.1
			container - A.a.2
	Nodes - B
		pods - B.a
			container - B.a.3

Kubernetes networking requirements - 
	Connecting pods across the nodes (East-West traffic)
	Need to discover services and load balancing
	Exposing services for external clients (North-south traffic)
	Segmenting network to increase pod security

Kubernetes netwiorking constraints/design goals - 
	Container-to-container communication using localhost.
	Communication between Pod without NAT
	Communication between Nodes running pods without NAT (Exception when traffic comes inside Pods)
	Communication between Container without NAT
	No IP masking - The IP that the container sees is the same as how other container see it.


Kubernetes networking - 
	Networking between containers inside pod
	Networking between pods
	External exposure of services

Understanding process - 
	Single network namespace
	Single node - two network NS
	Multiple node same L2 network
	Multiple node, overlay network



--------Observations----
kubectl get pods -o json | jq '.items[].status.podIP' ## See the IP is 172.17.0.4
kubectl get pods -o json | jq '.items[].status.hostIP' ## See the IP is 10.0.2.15
kubectl get nodes -o json | jq '.items[].status.addresses' ## See the IP is 10.0.2.15





Credit ----
https://kccna18.sched.com/speaker/kristen.f.jacobs
https://www.youtube.com/watch?v=6v_BDHIgOY8&t=694s Container Networking From Scratch - Kristen Jacobs, Oracle
https://github.com/kristenjacobs/container-networking
https://www.gabriel.urdhr.fr/2016/01/12/ip-over-udp-with-socat/
https://www.rubyguides.com/2012/07/socat-cheatsheet/
https://medium.com/@copyconstruct/socat-29453e9fc8a6
http://www.dest-unreach.org/socat/doc/socat-tun.html
Vagrant----
vagrant box list
